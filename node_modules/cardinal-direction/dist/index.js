"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cardinalConverter = exports.degreeFromCardinal = exports.cardinalFromDegree = exports.CardinalSubset = exports.CardinalDirection = void 0;
const CardinalIncrement = 11.25;
function cardinalIntFromDegree(degree) {
    const int = Math.round(degree / CardinalIncrement);
    return int > 31 ? 0 : int;
}
function ensureProperType(value, block) {
    if (typeof value === "string") {
        return block[value];
    }
    else {
        return block[block[value]];
    }
}
function cardinalFromIntSubset(cardinalInt, cardinalSubset) {
    const subset = ensureProperType(cardinalSubset, CardinalSubset);
    const int = Math.round(cardinalInt / subset) * subset;
    return CardinalDirection[int > 32 - subset + subset / 2 ? 0 : int];
}
var CardinalTitle;
(function (CardinalTitle) {
    CardinalTitle[CardinalTitle["North"] = 0] = "North";
    CardinalTitle[CardinalTitle["North by East"] = 1] = "North by East";
    CardinalTitle[CardinalTitle["North Northeast"] = 2] = "North Northeast";
    CardinalTitle[CardinalTitle["Northeast by North"] = 3] = "Northeast by North";
    CardinalTitle[CardinalTitle["Northeast"] = 4] = "Northeast";
    CardinalTitle[CardinalTitle["Northeast by East"] = 5] = "Northeast by East";
    CardinalTitle[CardinalTitle["East Northeast"] = 6] = "East Northeast";
    CardinalTitle[CardinalTitle["East by North"] = 7] = "East by North";
    CardinalTitle[CardinalTitle["East"] = 8] = "East";
    CardinalTitle[CardinalTitle["East by South"] = 9] = "East by South";
    CardinalTitle[CardinalTitle["East Southeast"] = 10] = "East Southeast";
    CardinalTitle[CardinalTitle["Southeast by East"] = 11] = "Southeast by East";
    CardinalTitle[CardinalTitle["Southeast"] = 12] = "Southeast";
    CardinalTitle[CardinalTitle["Southeast by South"] = 13] = "Southeast by South";
    CardinalTitle[CardinalTitle["South Southeast"] = 14] = "South Southeast";
    CardinalTitle[CardinalTitle["South by East"] = 15] = "South by East";
    CardinalTitle[CardinalTitle["South"] = 16] = "South";
    CardinalTitle[CardinalTitle["South by West"] = 17] = "South by West";
    CardinalTitle[CardinalTitle["South Southwest"] = 18] = "South Southwest";
    CardinalTitle[CardinalTitle["Southwest by South"] = 19] = "Southwest by South";
    CardinalTitle[CardinalTitle["Southwest"] = 20] = "Southwest";
    CardinalTitle[CardinalTitle["Southwest by West"] = 21] = "Southwest by West";
    CardinalTitle[CardinalTitle["West Southwest"] = 22] = "West Southwest";
    CardinalTitle[CardinalTitle["West by South"] = 23] = "West by South";
    CardinalTitle[CardinalTitle["West"] = 24] = "West";
    CardinalTitle[CardinalTitle["West by North"] = 25] = "West by North";
    CardinalTitle[CardinalTitle["West Northwest"] = 26] = "West Northwest";
    CardinalTitle[CardinalTitle["Northwest by West"] = 27] = "Northwest by West";
    CardinalTitle[CardinalTitle["Northwest"] = 28] = "Northwest";
    CardinalTitle[CardinalTitle["Northwest by North"] = 29] = "Northwest by North";
    CardinalTitle[CardinalTitle["North Northwest"] = 30] = "North Northwest";
    CardinalTitle[CardinalTitle["North by West"] = 31] = "North by West";
})(CardinalTitle || (CardinalTitle = {}));
/**
 * There are 32 cardinal-type direction on a compass.
 * - This numeric enum is `0` indexed.
 */
var CardinalDirection;
(function (CardinalDirection) {
    CardinalDirection[CardinalDirection["N"] = 0] = "N";
    CardinalDirection[CardinalDirection["NbE"] = 1] = "NbE";
    CardinalDirection[CardinalDirection["NNE"] = 2] = "NNE";
    CardinalDirection[CardinalDirection["NEbN"] = 3] = "NEbN";
    CardinalDirection[CardinalDirection["NE"] = 4] = "NE";
    CardinalDirection[CardinalDirection["NEbE"] = 5] = "NEbE";
    CardinalDirection[CardinalDirection["ENE"] = 6] = "ENE";
    CardinalDirection[CardinalDirection["EbN"] = 7] = "EbN";
    CardinalDirection[CardinalDirection["E"] = 8] = "E";
    CardinalDirection[CardinalDirection["EbS"] = 9] = "EbS";
    CardinalDirection[CardinalDirection["ESE"] = 10] = "ESE";
    CardinalDirection[CardinalDirection["SEbE"] = 11] = "SEbE";
    CardinalDirection[CardinalDirection["SE"] = 12] = "SE";
    CardinalDirection[CardinalDirection["SEbS"] = 13] = "SEbS";
    CardinalDirection[CardinalDirection["SSE"] = 14] = "SSE";
    CardinalDirection[CardinalDirection["SbE"] = 15] = "SbE";
    CardinalDirection[CardinalDirection["S"] = 16] = "S";
    CardinalDirection[CardinalDirection["SbW"] = 17] = "SbW";
    CardinalDirection[CardinalDirection["SSW"] = 18] = "SSW";
    CardinalDirection[CardinalDirection["SWbS"] = 19] = "SWbS";
    CardinalDirection[CardinalDirection["SW"] = 20] = "SW";
    CardinalDirection[CardinalDirection["SWbW"] = 21] = "SWbW";
    CardinalDirection[CardinalDirection["WSW"] = 22] = "WSW";
    CardinalDirection[CardinalDirection["WbS"] = 23] = "WbS";
    CardinalDirection[CardinalDirection["W"] = 24] = "W";
    CardinalDirection[CardinalDirection["WbN"] = 25] = "WbN";
    CardinalDirection[CardinalDirection["WNW"] = 26] = "WNW";
    CardinalDirection[CardinalDirection["NWbW"] = 27] = "NWbW";
    CardinalDirection[CardinalDirection["NW"] = 28] = "NW";
    CardinalDirection[CardinalDirection["NWbN"] = 29] = "NWbN";
    CardinalDirection[CardinalDirection["NNW"] = 30] = "NNW";
    CardinalDirection[CardinalDirection["NbW"] = 31] = "NbW";
})(CardinalDirection = exports.CardinalDirection || (exports.CardinalDirection = {}));
/**
 * Used to restrict the type of cardinal direction that can be returned by `cardinalFromDegree`. When a subset is specified the degree will be pushed the the nearest acceptable cardinal.
 * @member Full - All directions can be returned. ___[DEFAULT]___
 * @member Basic - Specifies only basic _(N,E,S,W)_ can be returned.
 * @member Ordinal - Extends on `Basic`, allowing _(NE,SE etc..)_ to be returned.
 * @member Intercardinal - Extends on `Ordinal, allowing _(NNE,ENE etc...)_ to re returned.
 */
var CardinalSubset;
(function (CardinalSubset) {
    CardinalSubset[CardinalSubset["Full"] = 1] = "Full";
    CardinalSubset[CardinalSubset["Basic"] = 8] = "Basic";
    CardinalSubset[CardinalSubset["Ordinal"] = 4] = "Ordinal";
    CardinalSubset[CardinalSubset["Intercardinal"] = 2] = "Intercardinal";
})(CardinalSubset = exports.CardinalSubset || (exports.CardinalSubset = {}));
/**
 * Converts a compass degree [0-360] into its correlated cardinal direction.
 * @param degree - The compass degree to covert [0-360].
 * @param subset - _[optional]_ Specifies the type of cardinal that can be returned. See `CardinalSubset` enum for details.
 * @return [string] A `CardinalDirection` enum member value.
 */
function cardinalFromDegree(degree, subset) {
    const int = cardinalIntFromDegree(degree);
    return subset ? cardinalFromIntSubset(int, subset) : CardinalDirection[int];
}
exports.cardinalFromDegree = cardinalFromDegree;
/**
 * Converts a cardinal direction into its correlated compass degree value.
 * @param cardinal - One of the `CardinalDirection` enum member values.
 * @return [number] A compas degree between [0-360].
 */
function degreeFromCardinal(cardinal) {
    const cardinalInt = ensureProperType(cardinal, CardinalDirection);
    return CardinalIncrement * cardinalInt;
}
exports.degreeFromCardinal = degreeFromCardinal;
/**
 * Takes a cardinal value and converts it to either its abbreviation or full title.
 * Integer representations are explicitly converted to cardinal abbreviations.
 * See the `Cardinal Table` in the README for context.
 * @param cardinal - One of the `CardinalDirection` enum member values, or its full title.
 * @returns [string] The converted cardinal value.
 */
function cardinalConverter(cardinal) {
    if (typeof cardinal === "number")
        return CardinalDirection[cardinal];
    return CardinalDirection[cardinal] !== undefined
        ? CardinalTitle[CardinalDirection[cardinal]]
        : CardinalDirection[CardinalTitle[cardinal]];
}
exports.cardinalConverter = cardinalConverter;
//# sourceMappingURL=index.js.map